/*
 * AimMatic API
 * APIs for Natural Voice and placeNext
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GeometryCollection;
import io.swagger.client.model.Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeometryImportApi {
    private ApiClient apiClient;

    public GeometryImportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeometryImportApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for insightsGeometryImportPost
     * @param body A [geometry collection](https://geojson.org/geojson-spec.html#geometrycollection) standard format and the request must specified content type as *application/geo+json*,  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insightsGeometryImportPostCall(GeometryCollection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/insights/GeometryImport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/geo+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "keyPair" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insightsGeometryImportPostValidateBeforeCall(GeometryCollection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling insightsGeometryImportPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insightsGeometryImportPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Import vector geographical geometries
     * The POST operation to store the vector geometries of GeoJSON format on Place Next services. The imported geometries will be used within our service such as map services and discovery services. The imported Geometries data must be a 2D [standard GeoJSON](https://geojson.org/geojson-spec.html), the altitude is currently not supported by our service at moments. 
     * @param body A [geometry collection](https://geojson.org/geojson-spec.html#geometrycollection) standard format and the request must specified content type as *application/geo+json*,  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> insightsGeometryImportPost(GeometryCollection body) throws ApiException {
        ApiResponse<List<String>> resp = insightsGeometryImportPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Import vector geographical geometries
     * The POST operation to store the vector geometries of GeoJSON format on Place Next services. The imported geometries will be used within our service such as map services and discovery services. The imported Geometries data must be a 2D [standard GeoJSON](https://geojson.org/geojson-spec.html), the altitude is currently not supported by our service at moments. 
     * @param body A [geometry collection](https://geojson.org/geojson-spec.html#geometrycollection) standard format and the request must specified content type as *application/geo+json*,  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> insightsGeometryImportPostWithHttpInfo(GeometryCollection body) throws ApiException {
        com.squareup.okhttp.Call call = insightsGeometryImportPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import vector geographical geometries (asynchronously)
     * The POST operation to store the vector geometries of GeoJSON format on Place Next services. The imported geometries will be used within our service such as map services and discovery services. The imported Geometries data must be a 2D [standard GeoJSON](https://geojson.org/geojson-spec.html), the altitude is currently not supported by our service at moments. 
     * @param body A [geometry collection](https://geojson.org/geojson-spec.html#geometrycollection) standard format and the request must specified content type as *application/geo+json*,  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insightsGeometryImportPostAsync(GeometryCollection body, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insightsGeometryImportPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
